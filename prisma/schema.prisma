// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  @@unique([provider, providerAccountId])
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  email String @unique
  hashedPassword String?
  image String?
  emailVerified DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  acounts Account[]

  chats Chat[] @relation(fields: [chatIds], references: [id])
  chatIds String[] @db.ObjectId

  messages Message[]

  // seenMessages Message[] @relation("SeenMessages", fields: [seenMessageIds], references: [id])
  // seenMessageIds String[] @db.ObjectId
}

model Chat {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  name String?
  isGroup Boolean?

  messages Message[]

  lastMessageAt DateTime?
  lastMessageText String?

  users User[] @relation(fields: [userIds], references: [id])
  userIds String[] @db.ObjectId
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String?
  image String?
  createdAt DateTime @default(now())

  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId String @db.ObjectId

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId String @db.ObjectId

  // seenBy User[] @relation("SeenMessages", fields: [seenByIds], references: [id])
  // seenByIds String[] @db.ObjectId
}
